{
    "JS Long Comment": {
        "scope": "javascript",
        "prefix": "jscomment",
        "body": ["/*", "$0", "*/"]
    },
    "JS Var": {
        "scope": "javascript",
        "prefix": "jsvar",
        "body": ["var ${1:name} = ${2:value}"],
        "description": "A var declaration"
    },
    "JS Let": {
        "scope": "javascript",
        "prefix": "jslet",
        "body": ["let ${1:name} = ${2:value}"],
        "description": "A let declaration"
    },
    "JS Const": {
        "scope": "javascript",
        "prefix": "jsconst",
        "body": ["const ${1:name} = ${2:value}"],
        "description": "A const declaration"
    },
    
    "JS UseStrict": {
        "scope": "javascript",
        "prefix": "jsuse",
        "body": ["\"use strict\";"],
        "description": "Use Strict statement"
    },
    "JS Import": {
        "scope": "javascript",
        "prefix": "jsimp",
        "body": ["const $1 = require('$2');"],
        "description": "An import statement"
    },
    "JS Export": {
        "scope": "javascript",
        "prefix": "jsexp",
        "body": "module.export = $1 ;",
        "description": "An export statement"
    },
    "JS Import Array": {
        "scope": "javascript",
        "prefix": "jsimport",
        "body": ["const { $1 } = require('$2');"],
        "description": "An array import statement"
    },
    "JS Export Array": {
        "scope": "javascript",
        "prefix": "jsexport",
        "body": "module.exports = { $1 };",
        "description": "An array export statement"
    },

	"JS If": {
        "scope": "javascript",
        "prefix": "jsif",
        "body": ["if (${1:expression}) {", "\t$0", "}"],
        "description": "An if condition"
    },
    "JS Elif": {
        "scope": "javascript",
        "prefix": "jselif",
        "body": ["else if (${1:expression}) {", "\t$0", "}"],
        "description": "An else if condition"
    },
    "JS Else": {
        "scope": "javascript",
        "prefix": "jselse",
        "body": ["else {", "\t$0", "}"],
        "description": "An else condition"
    },
    "JS TreeIf": {
        "scope": "javascript",
        "prefix": "jstreeif",
        "body": ["if (${1:expression}) {", "\t$2", "} else {", "\t$0", "}"],
        "description": "An if/else condition"
    },
    "JS TreeElif": {
        "scope": "javascript",
        "prefix": "jstreeelif",
        "body": ["if (${1:expression}) {", "\t$3", "} else if (${2:expression2}) {", "\t$4", "} else {", "\t$0", "}"],
        "description": "An if/elif/else condition"
    },

    "JS For Of": {
        "scope": "javascript",
        "prefix": "jsforof",
        "body": ["for (const ${1:element} of ${2:array}) {", "\t$0", "}"],
        "description": "A for of loop"
    }, 
    "JS For In": {
        "scope": "javascript",
        "prefix": "jsforin",
        "body": ["for (const ${1:key} in ${2:object}) {", "\t$0", "}"],
        "description": "A for in loop"
    },
    "JS For Loop": {
        "scope": "javascript",
        "prefix": "jsfor",
        "body": ["for (const ${1} = ${2:start}; ${1} <= ${3:end}; ${1}++) {", "\t$0", "}"],
        "description": "A for loop"
    },
    "JS While": {
        "scope": "javascript",
        "prefix": "jswhile",
        "body": ["while (${1:condition}) {", "\t$0", "}"],
        "description": "A while loop"
    },
    "JS Do While": {
        "scope": "javascript",
        "prefix": "jsdowhile",
        "body": ["do {", "\t$0", "} while (${1:condition})"],
        "description": "A do while loop"
    },
    "JS Switch": {
        "scope": "javascript",
        "prefix": "jsswitch",
        "body": ["switch (${1:expression}) {", "\tcase $2:", "\t\t$0", "\t\tbreak;", "\tcase $3:", "\t\t", "\t\tbreak;", "}"],
        "description": "A switch loop"
    },

    "JS Function": {
        "scope": "javascript",
        "prefix": "jsfunction",
        "body": ["function ${1:name}(${2:parameters}) {", "\t$0", "}"],
        "description": "A function"
    },
    "JS Class": {
        "scope": "javascript",
        "prefix": "jsclass",
        "body": ["class ${1:name} {", "\t$0", "}"],
        "description": "A class"
    },
    "JS Constructor": {
        "scope": "javascript",
        "prefix": "jsconstruct",
        "body": ["constructor(${2:parameters}) {", "\tthis.${2} = ${2};", "}"],
        "description": "A class"
    },
    "JS Method": {
        "scope": "javascript",
        "prefix": "jsmethod",
        "body": ["${1:name}(${2:parameters}) {", "\t$0", "}"],
        "description": "A class method"
    },
    "JS Static Method": {
        "scope": "javascript",
        "prefix": "jsstatic",
        "body": ["static ${1:name}(${2:parameters}) {", "\t$0", "}"],
        "description": "A class method"
    },
    "JS Class Call": {
        "scope": "javascript",
        "prefix": "jsnew",
        "body": ["const ${1:name} = new ${2:class}(${3})"],
        "description": "A Class Call statement"
    },

    "JS Try": {
        "scope": "javascript",
        "prefix": "jstry",
        "body": ["try {", "\t$1", "} catch (error) {", "\t$2", "}"],
        "description": "A try catch condition"
    },

    "Log": {
        "scope": "javascript",
        "prefix": "log",
        "body": ["console.log(\"$1\")"],
        "description": "Console log"
    },
    "Error": {
        "scope": "javascript",
        "prefix": "error",
        "body": ["console.error(\"$1\")"],
        "description": "Console error"
    },

    "JS ElementByID": {
        "scope": "javascript",
        "prefix": "jsbyid",
        "body": ["const ${1:name} = document.getElementById('${2:element}');"],
        "description": "A getElementById statement"
    },
    "JS ElementsByClass": {
        "scope": "javascript",
        "prefix": "jsbyclass",
        "body": ["const ${1:name} = document.getElementsByClass('${2:element}');"],
        "description": "A getElementsById statement"
    },
    "JS QuerySelector": {
        "scope": "javascript",
        "prefix": "jsselector",
        "body": ["const ${1:name} = document.querySelector('${2:element}')"],
        "description": "A querySelector statement"
    },
    "JS CreateElement": {
        "scope": "javascript",
        "prefix": "jsnewelement",
        "body": ["const ${1:name} = document.createElement('${2:tag}');"],
        "description": "A createElement statement"
    },
    "JS EventListener": {
        "scope": "javascript",
        "prefix": "jslistener",
        "body": ["document.addEventListener('${2:type}', function() {", "\t$0", "})"],
        "description": "A addEventListener statement"
    },
}